/* MAKE_ROUTE.AML                                            */
/*   Craig Heither, last revised 02/16/2010                  */

/* **************************************************************************** */
/*  AML IS CALLED BY IMPORT_ROUTES.PY TO BUILD RAIL ROUTES IN ARC/INFO
/*  COVERAGE AND IMPORT ALL CODING ATTRIBUTES.  STEP 3 OF PROCESS.
/* **************************************************************************** */

&args dir
&watch %dir%\watch.txt &commands
&sv when = [date -usa]
&sv count = 1

w %dir%

&if not [exists temp_arc.dbf -file] &then &do
  listoutput %dir%\aml_message.txt init
  listoutput note %when%
  listoutput note AML STOPPED BECAUSE TEMP\TEMP_ARC.DBF DOES NOT EXIST!!
  &return
&end
&if [exists junk -cover] &then kill junk all

   /*** VERIFY A NETWORK LICENSE IS AVAILABLE TO PERFORM THE PROCESSING ***/
&sv lic1 = [extract 1 [show product network]] 
&sv lic2 = [extract 2 [show product network]] 
&if %lic1% le %lic2% &then &do
  listoutput %dir%\aml_message.txt init
  listoutput note %when%
  listoutput note AML STOPPED BECAUSE NO NETWORK LICENSES ARE CURRENTLY AVAILABLE!!
  &return
&end

/* ===================================================================== */
   /** PART 1. CONVERT SHAPEFILE TO COVERAGE & ATTACH IDS TO NODES  **/
/* ===================================================================== */
&type * * * * * * * * * * * * * * * * * * * * * * 
&type  Creating Coverage & Setting Node Numbers 
&type * * * * * * * * * * * * * * * * * * * * * * 
shapearc temp_arc junk
build junk arc
build junk node
tables
 sel junk.nat
  redefine
   5,fnode#,4,5,b
   5,tnode#,4,5,b
   ~
 q
indexitem junk.aat fnode#
indexitem junk.aat tnode#
indexitem junk.nat fnode#
indexitem junk.nat tnode#
relate add
 one
   junk.aat
   info
   fnode#
   fnode#
   linear
   ro
 two
   junk.aat
   info
   tnode#
   tnode#
   linear
   ro
   ~
ap
 asel junk arc
 resel junk node keyfile junk arc fnode#
  cal junk node junk-id = one//anode
 clearsel
 asel junk arc
 resel junk node keyfile junk arc tnode#
  cal junk node junk-id = two//bnode
 q
relate drop $ALL

/* ===================================================================== */
   /** PART 2. IMPORT ROUTE CODING DATA  **/
/* ===================================================================== */
&if [exists route.new -info] &then killinfo route.new
&if [exists itinerary.new -info] &then killinfo itinerary.new
&if [exists junk.stp -info] &then killinfo junk.stp

  /*** IMPORT DATA & BUILD ROUTES ***/
tables
  define route.new
    tr_line,8,8,c
    description,20,20,c
    mode,1,1,c
    veh_type,1,1,i
    headway,5,5,n,2
    speed,4,4,n,1
    scenario,8,8,c
    ftr_headway,20,20,c
    rockford,6,6,c
    notes,30,30,c
    ~
    add from route.txt
  define itinerary.new
    tr_line,8,8,c
    anode,5,5,i
    bnode,5,5,i
    layover,8,8,c
    dw_code,1,1,i
    dw_time,5,5,n,2
    zn_fare,7,7,n,2
    trv_time,8,8,n,5
    order,3,3,i
    route,3,3,i
    place,5,5,n,0
    abnode,10,10,n,0
    ~
    add from itin.txt
  define junk.stp
    junk-id,5,5,n,0
    order,5,5,n,0
    route,5,5,n,0
    ~
    add from path.txt

  sel route.new
    additem route.new link 4 4 i
     cal link = $recno
  sel route.new
    resel scenario = '0'
     cal scenario = ' '
  sel route.new
    resel ftr_headway = 'X'
     cal ftr_headway = ' '
  sel route.new
    resel rockford = 'X'
     cal rockford = ' '
  sel route.new
    resel notes = 'X'
     cal notes = ' '
  sel itinerary.new
    additem itinerary.new code 8 8 n 0
     cal code = route * 10000 + place
  sel itinerary.new
    resel layover = '0'
     cal layover = ' '
  sel junk.aat
    additem junk.aat abnode 10 10 n 0
     cal abnode = anode * 100000 + bnode
      /*** ADD IMPEDANCE VARIABLE TO PROHIBIT USE OF UNDESIRABLE LINKS ***/
      /***      (NEGATIVE VALUES MEAN LINK CANNOT BE TRAVERSED)        ***/
    additem junk.aat ft_imp 5 5 n 2
    additem junk.aat tf_imp 5 5 n 2
     cal ft_imp = -1
     cal tf_imp = -1
    additem junk.aat arclink# 4 5 b
     cal arclink# = junk#
    q

/* ===================================================================== */
   /** PART 3. BUILD ROUTES IN COVERAGE  **/
/* ===================================================================== */
  /** DETERMINE NUMBER OF ROUTES TO CREATE **/
ae
  edit route.new info
  sel all
  cursor open
   &sv max = %:edit.AML$NSEL%
  cursor close
  q; n

  /** ITERATE THROUGH ROUTES AND BUILD THEM **/
  /** This was added to build each individually to eliminate any chance of path building error **/
 &do &while %count% le %max%
  ap
     &type count = %count%
     asel itinerary.new info
       resel itinerary.new info route = %count%
       infofile itinerary.new info one.new init
     asel one.new info
     resel junk arc keyfile one.new info abnode
       cal junk arc ft_imp = miles
       cal junk arc tf_imp = miles

     asel junk.stp info
       resel junk.stp info route = %count%
       infofile junk.stp info one.stp init

     netcover junk tranpath
     impedance ft_imp tf_imp
     stops one.stp order route
     path stops

     clearsel     
     asel junk arc
       cal junk arc ft_imp = -1
       cal junk arc tf_imp = -1
  q
   &sv count = %count% + 1
 &end

/* ===================================================================== */
   /** PART 4. STORE ALL ROUTE & SECTION INFORMATION IN TABLES **/
/* ===================================================================== */
tables
  &if not [iteminfo junk -route.tranpath tr_line -exists] &then &do
    additem junk.rattranpath tr_line 8 8 c
    additem junk.rattranpath description 20 20 c
    additem junk.rattranpath mode 1 1 c
    additem junk.rattranpath veh_type 1 1 i
    additem junk.rattranpath headway 5 5 n 2
    additem junk.rattranpath speed 4 4 n 1
    additem junk.rattranpath scenario 8 8 c
    additem junk.rattranpath ftr_headway 20 20 c
    additem junk.rattranpath rockford 6 6 c
    additem junk.rattranpath notes 30 30 c
  &end
  &if not [iteminfo junk -section.tranpath tr_line -exists] &then &do
    additem junk.sectranpath tr_line 8 8 c
    additem junk.sectranpath itin_a 5 5 i
    additem junk.sectranpath itin_b 5 5 i
    additem junk.sectranpath it_order 3 3 i
    additem junk.sectranpath layover 8 8 c
    additem junk.sectranpath dw_code 1 1 i
    additem junk.sectranpath dw_time 5 5 n 2
    additem junk.sectranpath zn_fare 7 7 n 2
    additem junk.sectranpath trv_time 8 8 n 5
    additem junk.sectranpath code 8 8 n 0
  &end
  sel junk.sectranpath
     cal code = routelink# * 10000 + tranpath-id
  q

indexitem junk.aat junk#
indexitem junk.sectranpath arclink#
indexitem junk.sectranpath code
indexitem junk.sectranpath routelink#
indexitem junk.rattranpath tranpath#
indexitem junk.rattranpath tr_line
indexitem itinerary.new code
indexitem route.new tr_line


ap
  relate add
  one
   junk.aat
   info
   arclink#
   junk#
   linear
   ro
  two
   itinerary.new
   info
   code
   code
   linear
   ro
  three
   junk.sectranpath
   info
   tranpath#
   routelink#
   linear
   ro
  four
   route.new
   info
   tr_line
   tr_line
   linear
   ro
   ~

  asel junk section.tranpath
    cal junk section.tranpath itin_a = one//anode
    cal junk section.tranpath itin_b = one//bnode
  resel junk section.tranpath f-pos gt t-pos
    &sv flag = [extract 1 [show select junk section.tranpath]]
      &if %flag% gt 0 &then &do
         cal junk section.tranpath itin_a = one//bnode
         cal junk section.tranpath itin_b = one//anode
      &end
  asel junk section.tranpath
    cal junk section.tranpath tr_line = two//tr_line
    cal junk section.tranpath layover = two//layover
    cal junk section.tranpath it_order = two//order
    cal junk section.tranpath dw_code = two//dw_code
    cal junk section.tranpath dw_time = two//dw_time 
    cal junk section.tranpath zn_fare = two//zn_fare
    cal junk section.tranpath trv_time = two//trv_time  
  asel junk route.tranpath
    cal junk route.tranpath tr_line = three//tr_line
    cal junk route.tranpath description = four//description
    cal junk route.tranpath mode = four//mode
    cal junk route.tranpath veh_type = four//veh_type
    cal junk route.tranpath headway = four//headway
    cal junk route.tranpath speed = four//speed
    cal junk route.tranpath scenario = four//scenario
    cal junk route.tranpath ftr_headway = four//ftr_headway
    cal junk route.tranpath rockford = four//rockford
    cal junk route.tranpath notes = four//notes
  relate drop $ALL
q

arcshape junk section.tranpath new_itin
killinfo itinerary.new
killinfo route.new
killinfo junk.stp
killinfo one.new
killinfo one.stp
&if [delete itin.txt] = 0 &then &type Successful Deletion of ITIN.TXT
&if [delete path.txt] = 0 &then &type Successful Deletion of PATH.TXT
&if [delete route.txt] = 0 &then &type Successful Deletion of ROUTE.TXT
&watch &off
&return AML IS FINISHED.




